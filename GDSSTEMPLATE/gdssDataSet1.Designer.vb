'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("gdssDataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class gdssDataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableserverdatetime As serverdatetimeDataTable
    
    Private tableN0ITEMS As N0ITEMSDataTable
    
    Private tableIDCARD As IDCARDDataTable
    
    Private tableN0OFFICE1 As N0OFFICE1DataTable
    
    Private tablePERGUNTableAdapter As PERGUNTableAdapterDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.ExcludeSchema) Then
                Me.InitExpressions
            End If
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("serverdatetime")) Is Nothing) Then
                MyBase.Tables.Add(New serverdatetimeDataTable(ds.Tables("serverdatetime")))
            End If
            If (Not (ds.Tables("N0ITEMS")) Is Nothing) Then
                MyBase.Tables.Add(New N0ITEMSDataTable(ds.Tables("N0ITEMS")))
            End If
            If (Not (ds.Tables("IDCARD")) Is Nothing) Then
                MyBase.Tables.Add(New IDCARDDataTable(ds.Tables("IDCARD")))
            End If
            If (Not (ds.Tables("N0OFFICE1")) Is Nothing) Then
                MyBase.Tables.Add(New N0OFFICE1DataTable(ds.Tables("N0OFFICE1")))
            End If
            If (Not (ds.Tables("PERGUNTableAdapter")) Is Nothing) Then
                MyBase.Tables.Add(New PERGUNTableAdapterDataTable(ds.Tables("PERGUNTableAdapter")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property serverdatetime() As serverdatetimeDataTable
        Get
            Return Me.tableserverdatetime
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property N0ITEMS() As N0ITEMSDataTable
        Get
            Return Me.tableN0ITEMS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IDCARD() As IDCARDDataTable
        Get
            Return Me.tableIDCARD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property N0OFFICE1() As N0OFFICE1DataTable
        Get
            Return Me.tableN0OFFICE1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERGUNTableAdapter() As PERGUNTableAdapterDataTable
        Get
            Return Me.tablePERGUNTableAdapter
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As gdssDataSet1 = CType(MyBase.Clone,gdssDataSet1)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("serverdatetime")) Is Nothing) Then
                MyBase.Tables.Add(New serverdatetimeDataTable(ds.Tables("serverdatetime")))
            End If
            If (Not (ds.Tables("N0ITEMS")) Is Nothing) Then
                MyBase.Tables.Add(New N0ITEMSDataTable(ds.Tables("N0ITEMS")))
            End If
            If (Not (ds.Tables("IDCARD")) Is Nothing) Then
                MyBase.Tables.Add(New IDCARDDataTable(ds.Tables("IDCARD")))
            End If
            If (Not (ds.Tables("N0OFFICE1")) Is Nothing) Then
                MyBase.Tables.Add(New N0OFFICE1DataTable(ds.Tables("N0OFFICE1")))
            End If
            If (Not (ds.Tables("PERGUNTableAdapter")) Is Nothing) Then
                MyBase.Tables.Add(New PERGUNTableAdapterDataTable(ds.Tables("PERGUNTableAdapter")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableserverdatetime = CType(MyBase.Tables("serverdatetime"),serverdatetimeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableserverdatetime) Is Nothing) Then
                Me.tableserverdatetime.InitVars
            End If
        End If
        Me.tableN0ITEMS = CType(MyBase.Tables("N0ITEMS"),N0ITEMSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableN0ITEMS) Is Nothing) Then
                Me.tableN0ITEMS.InitVars
            End If
        End If
        Me.tableIDCARD = CType(MyBase.Tables("IDCARD"),IDCARDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIDCARD) Is Nothing) Then
                Me.tableIDCARD.InitVars
            End If
        End If
        Me.tableN0OFFICE1 = CType(MyBase.Tables("N0OFFICE1"),N0OFFICE1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableN0OFFICE1) Is Nothing) Then
                Me.tableN0OFFICE1.InitVars
            End If
        End If
        Me.tablePERGUNTableAdapter = CType(MyBase.Tables("PERGUNTableAdapter"),PERGUNTableAdapterDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERGUNTableAdapter) Is Nothing) Then
                Me.tablePERGUNTableAdapter.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "gdssDataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/gdssDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableserverdatetime = New serverdatetimeDataTable()
        MyBase.Tables.Add(Me.tableserverdatetime)
        Me.tableN0ITEMS = New N0ITEMSDataTable()
        MyBase.Tables.Add(Me.tableN0ITEMS)
        Me.tableIDCARD = New IDCARDDataTable(false)
        MyBase.Tables.Add(Me.tableIDCARD)
        Me.tableN0OFFICE1 = New N0OFFICE1DataTable()
        MyBase.Tables.Add(Me.tableN0OFFICE1)
        Me.tablePERGUNTableAdapter = New PERGUNTableAdapterDataTable()
        MyBase.Tables.Add(Me.tablePERGUNTableAdapter)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeserverdatetime() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeN0ITEMS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeIDCARD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeN0OFFICE1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePERGUNTableAdapter() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As gdssDataSet1 = New gdssDataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitExpressions()
        Me.IDCARD.FullNameColumn.Expression = "FName+' '+FATHER+' '+LNAME"
    End Sub
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub serverdatetimeRowChangeEventHandler(ByVal sender As Object, ByVal e As serverdatetimeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub N0ITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As N0ITEMSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub IDCARDRowChangeEventHandler(ByVal sender As Object, ByVal e As IDCARDRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub N0OFFICE1RowChangeEventHandler(ByVal sender As Object, ByVal e As N0OFFICE1RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PERGUNTableAdapterRowChangeEventHandler(ByVal sender As Object, ByVal e As PERGUNTableAdapterRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class serverdatetimeDataTable
        Inherits Global.System.Data.TypedTableBase(Of serverdatetimeRow)
        
        Private columnSYSDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "serverdatetime"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As serverdatetimeRow
            Get
                Return CType(Me.Rows(index),serverdatetimeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event serverdatetimeRowChanging As serverdatetimeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event serverdatetimeRowChanged As serverdatetimeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event serverdatetimeRowDeleting As serverdatetimeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event serverdatetimeRowDeleted As serverdatetimeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddserverdatetimeRow(ByVal row As serverdatetimeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddserverdatetimeRow(ByVal SYSDATE As Date) As serverdatetimeRow
            Dim rowserverdatetimeRow As serverdatetimeRow = CType(Me.NewRow,serverdatetimeRow)
            Dim columnValuesArray() As Object = New Object() {SYSDATE}
            rowserverdatetimeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowserverdatetimeRow)
            Return rowserverdatetimeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As serverdatetimeDataTable = CType(MyBase.Clone,serverdatetimeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New serverdatetimeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSYSDATE = MyBase.Columns("SYSDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSYSDATE = New Global.System.Data.DataColumn("SYSDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSDATE)
            Me.columnSYSDATE.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewserverdatetimeRow() As serverdatetimeRow
            Return CType(Me.NewRow,serverdatetimeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New serverdatetimeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(serverdatetimeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.serverdatetimeRowChangedEvent) Is Nothing) Then
                RaiseEvent serverdatetimeRowChanged(Me, New serverdatetimeRowChangeEvent(CType(e.Row,serverdatetimeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.serverdatetimeRowChangingEvent) Is Nothing) Then
                RaiseEvent serverdatetimeRowChanging(Me, New serverdatetimeRowChangeEvent(CType(e.Row,serverdatetimeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.serverdatetimeRowDeletedEvent) Is Nothing) Then
                RaiseEvent serverdatetimeRowDeleted(Me, New serverdatetimeRowChangeEvent(CType(e.Row,serverdatetimeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.serverdatetimeRowDeletingEvent) Is Nothing) Then
                RaiseEvent serverdatetimeRowDeleting(Me, New serverdatetimeRowChangeEvent(CType(e.Row,serverdatetimeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveserverdatetimeRow(ByVal row As serverdatetimeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As gdssDataSet1 = New gdssDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "serverdatetimeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class N0ITEMSDataTable
        Inherits Global.System.Data.TypedTableBase(Of N0ITEMSRow)
        
        Private columnITEM As Global.System.Data.DataColumn
        
        Private columnLABEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "N0ITEMS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As N0ITEMSRow
            Get
                Return CType(Me.Rows(index),N0ITEMSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0ITEMSRowChanging As N0ITEMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0ITEMSRowChanged As N0ITEMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0ITEMSRowDeleting As N0ITEMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0ITEMSRowDeleted As N0ITEMSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddN0ITEMSRow(ByVal row As N0ITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddN0ITEMSRow(ByVal ITEM As String, ByVal LABEL As String) As N0ITEMSRow
            Dim rowN0ITEMSRow As N0ITEMSRow = CType(Me.NewRow,N0ITEMSRow)
            Dim columnValuesArray() As Object = New Object() {ITEM, LABEL}
            rowN0ITEMSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowN0ITEMSRow)
            Return rowN0ITEMSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByITEM(ByVal ITEM As String) As N0ITEMSRow
            Return CType(Me.Rows.Find(New Object() {ITEM}),N0ITEMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As N0ITEMSDataTable = CType(MyBase.Clone,N0ITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New N0ITEMSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnITEM = MyBase.Columns("ITEM")
            Me.columnLABEL = MyBase.Columns("LABEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnITEM = New Global.System.Data.DataColumn("ITEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM)
            Me.columnLABEL = New Global.System.Data.DataColumn("LABEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnITEM}, true))
            Me.columnITEM.AllowDBNull = false
            Me.columnITEM.Unique = true
            Me.columnITEM.MaxLength = 7
            Me.columnLABEL.AllowDBNull = false
            Me.columnLABEL.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewN0ITEMSRow() As N0ITEMSRow
            Return CType(Me.NewRow,N0ITEMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New N0ITEMSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(N0ITEMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.N0ITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent N0ITEMSRowChanged(Me, New N0ITEMSRowChangeEvent(CType(e.Row,N0ITEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.N0ITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent N0ITEMSRowChanging(Me, New N0ITEMSRowChangeEvent(CType(e.Row,N0ITEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.N0ITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent N0ITEMSRowDeleted(Me, New N0ITEMSRowChangeEvent(CType(e.Row,N0ITEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.N0ITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent N0ITEMSRowDeleting(Me, New N0ITEMSRowChangeEvent(CType(e.Row,N0ITEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveN0ITEMSRow(ByVal row As N0ITEMSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As gdssDataSet1 = New gdssDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "N0ITEMSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IDCARDDataTable
        Inherits Global.System.Data.TypedTableBase(Of IDCARDRow)
        
        Private columnCODE As Global.System.Data.DataColumn
        
        Private columnLNAME As Global.System.Data.DataColumn
        
        Private columnFNAME As Global.System.Data.DataColumn
        
        Private columnFATHER As Global.System.Data.DataColumn
        
        Private columnFMOTHER As Global.System.Data.DataColumn
        
        Private columnDBIRTH As Global.System.Data.DataColumn
        
        Private columnFullName As Global.System.Data.DataColumn
        
        Private columnGRADE As Global.System.Data.DataColumn
        
        Private columnSOURCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "IDCARD"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FATHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFATHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FMOTHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFMOTHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DBIRTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBIRTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GRADEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRADE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IDCARDRow
            Get
                Return CType(Me.Rows(index),IDCARDRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IDCARDRowChanging As IDCARDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IDCARDRowChanged As IDCARDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IDCARDRowDeleting As IDCARDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event IDCARDRowDeleted As IDCARDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddIDCARDRow(ByVal row As IDCARDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddIDCARDRow(ByVal CODE As Integer, ByVal LNAME As String, ByVal FNAME As String, ByVal FATHER As String, ByVal FMOTHER As String, ByVal DBIRTH As Date, ByVal FullName As String, ByVal GRADE As Short, ByVal SOURCE As String) As IDCARDRow
            Dim rowIDCARDRow As IDCARDRow = CType(Me.NewRow,IDCARDRow)
            Dim columnValuesArray() As Object = New Object() {CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, FullName, GRADE, SOURCE}
            rowIDCARDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIDCARDRow)
            Return rowIDCARDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddIDCARDRow(ByVal CODE As Integer, ByVal LNAME As String, ByVal FNAME As String, ByVal FATHER As String, ByVal FMOTHER As String, ByVal DBIRTH As Date, ByVal GRADE As Short, ByVal SOURCE As String) As IDCARDRow
            Dim rowIDCARDRow As IDCARDRow = CType(Me.NewRow,IDCARDRow)
            Dim columnValuesArray() As Object = New Object() {CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, Nothing, GRADE, SOURCE}
            rowIDCARDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIDCARDRow)
            Return rowIDCARDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCODESOURCE(ByVal CODE As Integer, ByVal SOURCE As String) As IDCARDRow
            Return CType(Me.Rows.Find(New Object() {CODE, SOURCE}),IDCARDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IDCARDDataTable = CType(MyBase.Clone,IDCARDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IDCARDDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODE = MyBase.Columns("CODE")
            Me.columnLNAME = MyBase.Columns("LNAME")
            Me.columnFNAME = MyBase.Columns("FNAME")
            Me.columnFATHER = MyBase.Columns("FATHER")
            Me.columnFMOTHER = MyBase.Columns("FMOTHER")
            Me.columnDBIRTH = MyBase.Columns("DBIRTH")
            Me.columnFullName = MyBase.Columns("FullName")
            Me.columnGRADE = MyBase.Columns("GRADE")
            Me.columnSOURCE = MyBase.Columns("SOURCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODE = New Global.System.Data.DataColumn("CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE)
            Me.columnLNAME = New Global.System.Data.DataColumn("LNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLNAME)
            Me.columnFNAME = New Global.System.Data.DataColumn("FNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFNAME)
            Me.columnFATHER = New Global.System.Data.DataColumn("FATHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFATHER)
            Me.columnFMOTHER = New Global.System.Data.DataColumn("FMOTHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFMOTHER)
            Me.columnDBIRTH = New Global.System.Data.DataColumn("DBIRTH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBIRTH)
            Me.columnFullName = New Global.System.Data.DataColumn("FullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullName)
            Me.columnGRADE = New Global.System.Data.DataColumn("GRADE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRADE)
            Me.columnSOURCE = New Global.System.Data.DataColumn("SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODE, Me.columnSOURCE}, true))
            Me.columnCODE.AllowDBNull = false
            Me.columnLNAME.AllowDBNull = false
            Me.columnLNAME.MaxLength = 35
            Me.columnFNAME.AllowDBNull = false
            Me.columnFNAME.MaxLength = 20
            Me.columnFATHER.AllowDBNull = false
            Me.columnFATHER.MaxLength = 20
            Me.columnFMOTHER.AllowDBNull = false
            Me.columnFMOTHER.MaxLength = 30
            Me.columnDBIRTH.AllowDBNull = false
            Me.columnFullName.ReadOnly = true
            Me.columnGRADE.AllowDBNull = false
            Me.columnSOURCE.AllowDBNull = false
            Me.columnSOURCE.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewIDCARDRow() As IDCARDRow
            Return CType(Me.NewRow,IDCARDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IDCARDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IDCARDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitExpressions()
            Me.FullNameColumn.Expression = "FName+' '+FATHER+' '+LNAME"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IDCARDRowChangedEvent) Is Nothing) Then
                RaiseEvent IDCARDRowChanged(Me, New IDCARDRowChangeEvent(CType(e.Row,IDCARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IDCARDRowChangingEvent) Is Nothing) Then
                RaiseEvent IDCARDRowChanging(Me, New IDCARDRowChangeEvent(CType(e.Row,IDCARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IDCARDRowDeletedEvent) Is Nothing) Then
                RaiseEvent IDCARDRowDeleted(Me, New IDCARDRowChangeEvent(CType(e.Row,IDCARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IDCARDRowDeletingEvent) Is Nothing) Then
                RaiseEvent IDCARDRowDeleting(Me, New IDCARDRowChangeEvent(CType(e.Row,IDCARDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveIDCARDRow(ByVal row As IDCARDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As gdssDataSet1 = New gdssDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IDCARDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class N0OFFICE1DataTable
        Inherits Global.System.Data.TypedTableBase(Of N0OFFICE1Row)
        
        Private columnCODE As Global.System.Data.DataColumn
        
        Private columnLABEL As Global.System.Data.DataColumn
        
        Private columnSLABEL As Global.System.Data.DataColumn
        
        Private columnRS As Global.System.Data.DataColumn
        
        Private columnADRS As Global.System.Data.DataColumn
        
        Private columnPHONE As Global.System.Data.DataColumn
        
        Private columnFAX As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "N0OFFICE1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLABELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLABEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ADRSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADRS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As N0OFFICE1Row
            Get
                Return CType(Me.Rows(index),N0OFFICE1Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0OFFICE1RowChanging As N0OFFICE1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0OFFICE1RowChanged As N0OFFICE1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0OFFICE1RowDeleting As N0OFFICE1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event N0OFFICE1RowDeleted As N0OFFICE1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddN0OFFICE1Row(ByVal row As N0OFFICE1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddN0OFFICE1Row(ByVal CODE As Integer, ByVal LABEL As String, ByVal SLABEL As String, ByVal RS As Integer, ByVal ADRS As String, ByVal PHONE As String, ByVal FAX As String) As N0OFFICE1Row
            Dim rowN0OFFICE1Row As N0OFFICE1Row = CType(Me.NewRow,N0OFFICE1Row)
            Dim columnValuesArray() As Object = New Object() {CODE, LABEL, SLABEL, RS, ADRS, PHONE, FAX}
            rowN0OFFICE1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowN0OFFICE1Row)
            Return rowN0OFFICE1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCODE(ByVal CODE As Integer) As N0OFFICE1Row
            Return CType(Me.Rows.Find(New Object() {CODE}),N0OFFICE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As N0OFFICE1DataTable = CType(MyBase.Clone,N0OFFICE1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New N0OFFICE1DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODE = MyBase.Columns("CODE")
            Me.columnLABEL = MyBase.Columns("LABEL")
            Me.columnSLABEL = MyBase.Columns("SLABEL")
            Me.columnRS = MyBase.Columns("RS")
            Me.columnADRS = MyBase.Columns("ADRS")
            Me.columnPHONE = MyBase.Columns("PHONE")
            Me.columnFAX = MyBase.Columns("FAX")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODE = New Global.System.Data.DataColumn("CODE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE)
            Me.columnLABEL = New Global.System.Data.DataColumn("LABEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL)
            Me.columnSLABEL = New Global.System.Data.DataColumn("SLABEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLABEL)
            Me.columnRS = New Global.System.Data.DataColumn("RS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRS)
            Me.columnADRS = New Global.System.Data.DataColumn("ADRS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADRS)
            Me.columnPHONE = New Global.System.Data.DataColumn("PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONE)
            Me.columnFAX = New Global.System.Data.DataColumn("FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODE}, true))
            Me.columnCODE.AllowDBNull = false
            Me.columnCODE.Unique = true
            Me.columnLABEL.AllowDBNull = false
            Me.columnLABEL.MaxLength = 50
            Me.columnSLABEL.MaxLength = 30
            Me.columnADRS.MaxLength = 100
            Me.columnPHONE.MaxLength = 10
            Me.columnFAX.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewN0OFFICE1Row() As N0OFFICE1Row
            Return CType(Me.NewRow,N0OFFICE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New N0OFFICE1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(N0OFFICE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.N0OFFICE1RowChangedEvent) Is Nothing) Then
                RaiseEvent N0OFFICE1RowChanged(Me, New N0OFFICE1RowChangeEvent(CType(e.Row,N0OFFICE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.N0OFFICE1RowChangingEvent) Is Nothing) Then
                RaiseEvent N0OFFICE1RowChanging(Me, New N0OFFICE1RowChangeEvent(CType(e.Row,N0OFFICE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.N0OFFICE1RowDeletedEvent) Is Nothing) Then
                RaiseEvent N0OFFICE1RowDeleted(Me, New N0OFFICE1RowChangeEvent(CType(e.Row,N0OFFICE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.N0OFFICE1RowDeletingEvent) Is Nothing) Then
                RaiseEvent N0OFFICE1RowDeleting(Me, New N0OFFICE1RowChangeEvent(CType(e.Row,N0OFFICE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveN0OFFICE1Row(ByVal row As N0OFFICE1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As gdssDataSet1 = New gdssDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "N0OFFICE1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERGUNTableAdapterDataTable
        Inherits Global.System.Data.TypedTableBase(Of PERGUNTableAdapterRow)
        
        Private columnCODE As Global.System.Data.DataColumn
        
        Private columnGNAME As Global.System.Data.DataColumn
        
        Private columnGTYPE As Global.System.Data.DataColumn
        
        Private columnGNUMBER As Global.System.Data.DataColumn
        
        Private columnGSTORE As Global.System.Data.DataColumn
        
        Private columnGSIZE As Global.System.Data.DataColumn
        
        Private columnGCLEANER As Global.System.Data.DataColumn
        
        Private columnGAMMO As Global.System.Data.DataColumn
        
        Private columnSUPPLIER As Global.System.Data.DataColumn
        
        Private columnOWNER As Global.System.Data.DataColumn
        
        Private columnOWNERSOURCE As Global.System.Data.DataColumn
        
        Private columnGRADE As Global.System.Data.DataColumn
        
        Private columnDDATE As Global.System.Data.DataColumn
        
        Private columnNBDOC As Global.System.Data.DataColumn
        
        Private columnNOTE As Global.System.Data.DataColumn
        
        Private columnSDATE As Global.System.Data.DataColumn
        
        Private columnUDATE As Global.System.Data.DataColumn
        
        Private columnUUSER As Global.System.Data.DataColumn
        
        Private columnMDATE As Global.System.Data.DataColumn
        
        Private columnMUSER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERGUNTableAdapter"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GSTOREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTORE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GSIZEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSIZE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GCLEANERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGCLEANER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GAMMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGAMMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUPPLIERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OWNERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOWNER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OWNERSOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOWNERSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GRADEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRADE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NBDOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNBDOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UUSERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MUSERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERGUNTableAdapterRow
            Get
                Return CType(Me.Rows(index),PERGUNTableAdapterRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERGUNTableAdapterRowChanging As PERGUNTableAdapterRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERGUNTableAdapterRowChanged As PERGUNTableAdapterRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERGUNTableAdapterRowDeleting As PERGUNTableAdapterRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PERGUNTableAdapterRowDeleted As PERGUNTableAdapterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPERGUNTableAdapterRow(ByVal row As PERGUNTableAdapterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPERGUNTableAdapterRow( _
                    ByVal CODE As Decimal,  _
                    ByVal GNAME As String,  _
                    ByVal GTYPE As String,  _
                    ByVal GNUMBER As String,  _
                    ByVal GSTORE As Decimal,  _
                    ByVal GSIZE As String,  _
                    ByVal GCLEANER As Decimal,  _
                    ByVal GAMMO As Decimal,  _
                    ByVal SUPPLIER As Decimal,  _
                    ByVal OWNER As Decimal,  _
                    ByVal OWNERSOURCE As Decimal,  _
                    ByVal GRADE As Decimal,  _
                    ByVal DDATE As Date,  _
                    ByVal NBDOC As String,  _
                    ByVal NOTE As String,  _
                    ByVal SDATE As Date,  _
                    ByVal UDATE As Date,  _
                    ByVal UUSER As String,  _
                    ByVal MDATE As Date,  _
                    ByVal MUSER As String) As PERGUNTableAdapterRow
            Dim rowPERGUNTableAdapterRow As PERGUNTableAdapterRow = CType(Me.NewRow,PERGUNTableAdapterRow)
            Dim columnValuesArray() As Object = New Object() {CODE, GNAME, GTYPE, GNUMBER, GSTORE, GSIZE, GCLEANER, GAMMO, SUPPLIER, OWNER, OWNERSOURCE, GRADE, DDATE, NBDOC, NOTE, SDATE, UDATE, UUSER, MDATE, MUSER}
            rowPERGUNTableAdapterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERGUNTableAdapterRow)
            Return rowPERGUNTableAdapterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCODE(ByVal CODE As Decimal) As PERGUNTableAdapterRow
            Return CType(Me.Rows.Find(New Object() {CODE}),PERGUNTableAdapterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERGUNTableAdapterDataTable = CType(MyBase.Clone,PERGUNTableAdapterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERGUNTableAdapterDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCODE = MyBase.Columns("CODE")
            Me.columnGNAME = MyBase.Columns("GNAME")
            Me.columnGTYPE = MyBase.Columns("GTYPE")
            Me.columnGNUMBER = MyBase.Columns("GNUMBER")
            Me.columnGSTORE = MyBase.Columns("GSTORE")
            Me.columnGSIZE = MyBase.Columns("GSIZE")
            Me.columnGCLEANER = MyBase.Columns("GCLEANER")
            Me.columnGAMMO = MyBase.Columns("GAMMO")
            Me.columnSUPPLIER = MyBase.Columns("SUPPLIER")
            Me.columnOWNER = MyBase.Columns("OWNER")
            Me.columnOWNERSOURCE = MyBase.Columns("OWNERSOURCE")
            Me.columnGRADE = MyBase.Columns("GRADE")
            Me.columnDDATE = MyBase.Columns("DDATE")
            Me.columnNBDOC = MyBase.Columns("NBDOC")
            Me.columnNOTE = MyBase.Columns("NOTE")
            Me.columnSDATE = MyBase.Columns("SDATE")
            Me.columnUDATE = MyBase.Columns("UDATE")
            Me.columnUUSER = MyBase.Columns("UUSER")
            Me.columnMDATE = MyBase.Columns("MDATE")
            Me.columnMUSER = MyBase.Columns("MUSER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCODE = New Global.System.Data.DataColumn("CODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE)
            Me.columnGNAME = New Global.System.Data.DataColumn("GNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGNAME)
            Me.columnGTYPE = New Global.System.Data.DataColumn("GTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGTYPE)
            Me.columnGNUMBER = New Global.System.Data.DataColumn("GNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGNUMBER)
            Me.columnGSTORE = New Global.System.Data.DataColumn("GSTORE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTORE)
            Me.columnGSIZE = New Global.System.Data.DataColumn("GSIZE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSIZE)
            Me.columnGCLEANER = New Global.System.Data.DataColumn("GCLEANER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGCLEANER)
            Me.columnGAMMO = New Global.System.Data.DataColumn("GAMMO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGAMMO)
            Me.columnSUPPLIER = New Global.System.Data.DataColumn("SUPPLIER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER)
            Me.columnOWNER = New Global.System.Data.DataColumn("OWNER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOWNER)
            Me.columnOWNERSOURCE = New Global.System.Data.DataColumn("OWNERSOURCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOWNERSOURCE)
            Me.columnGRADE = New Global.System.Data.DataColumn("GRADE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRADE)
            Me.columnDDATE = New Global.System.Data.DataColumn("DDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDATE)
            Me.columnNBDOC = New Global.System.Data.DataColumn("NBDOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNBDOC)
            Me.columnNOTE = New Global.System.Data.DataColumn("NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTE)
            Me.columnSDATE = New Global.System.Data.DataColumn("SDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDATE)
            Me.columnUDATE = New Global.System.Data.DataColumn("UDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUDATE)
            Me.columnUUSER = New Global.System.Data.DataColumn("UUSER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUUSER)
            Me.columnMDATE = New Global.System.Data.DataColumn("MDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMDATE)
            Me.columnMUSER = New Global.System.Data.DataColumn("MUSER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUSER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODE}, true))
            Me.columnCODE.AllowDBNull = false
            Me.columnCODE.Unique = true
            Me.columnGNAME.AllowDBNull = false
            Me.columnGNAME.MaxLength = 7
            Me.columnGTYPE.MaxLength = 20
            Me.columnGNUMBER.AllowDBNull = false
            Me.columnGNUMBER.MaxLength = 50
            Me.columnGSIZE.MaxLength = 10
            Me.columnOWNER.AllowDBNull = false
            Me.columnGRADE.AllowDBNull = false
            Me.columnDDATE.AllowDBNull = false
            Me.columnNBDOC.AllowDBNull = false
            Me.columnNBDOC.MaxLength = 20
            Me.columnNOTE.MaxLength = 500
            Me.columnUUSER.MaxLength = 10
            Me.columnMUSER.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPERGUNTableAdapterRow() As PERGUNTableAdapterRow
            Return CType(Me.NewRow,PERGUNTableAdapterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERGUNTableAdapterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERGUNTableAdapterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERGUNTableAdapterRowChangedEvent) Is Nothing) Then
                RaiseEvent PERGUNTableAdapterRowChanged(Me, New PERGUNTableAdapterRowChangeEvent(CType(e.Row,PERGUNTableAdapterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERGUNTableAdapterRowChangingEvent) Is Nothing) Then
                RaiseEvent PERGUNTableAdapterRowChanging(Me, New PERGUNTableAdapterRowChangeEvent(CType(e.Row,PERGUNTableAdapterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERGUNTableAdapterRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERGUNTableAdapterRowDeleted(Me, New PERGUNTableAdapterRowChangeEvent(CType(e.Row,PERGUNTableAdapterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERGUNTableAdapterRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERGUNTableAdapterRowDeleting(Me, New PERGUNTableAdapterRowChangeEvent(CType(e.Row,PERGUNTableAdapterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePERGUNTableAdapterRow(ByVal row As PERGUNTableAdapterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As gdssDataSet1 = New gdssDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERGUNTableAdapterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class serverdatetimeRow
        Inherits Global.System.Data.DataRow
        
        Private tableserverdatetime As serverdatetimeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableserverdatetime = CType(Me.Table,serverdatetimeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableserverdatetime.SYSDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYSDATE' in table 'serverdatetime' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableserverdatetime.SYSDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSYSDATENull() As Boolean
            Return Me.IsNull(Me.tableserverdatetime.SYSDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSYSDATENull()
            Me(Me.tableserverdatetime.SYSDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class N0ITEMSRow
        Inherits Global.System.Data.DataRow
        
        Private tableN0ITEMS As N0ITEMSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableN0ITEMS = CType(Me.Table,N0ITEMSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM() As String
            Get
                Return CType(Me(Me.tableN0ITEMS.ITEMColumn),String)
            End Get
            Set
                Me(Me.tableN0ITEMS.ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL() As String
            Get
                Return CType(Me(Me.tableN0ITEMS.LABELColumn),String)
            End Get
            Set
                Me(Me.tableN0ITEMS.LABELColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class IDCARDRow
        Inherits Global.System.Data.DataRow
        
        Private tableIDCARD As IDCARDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIDCARD = CType(Me.Table,IDCARDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CODE() As Integer
            Get
                Return CType(Me(Me.tableIDCARD.CODEColumn),Integer)
            End Get
            Set
                Me(Me.tableIDCARD.CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LNAME() As String
            Get
                Return CType(Me(Me.tableIDCARD.LNAMEColumn),String)
            End Get
            Set
                Me(Me.tableIDCARD.LNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FNAME() As String
            Get
                Return CType(Me(Me.tableIDCARD.FNAMEColumn),String)
            End Get
            Set
                Me(Me.tableIDCARD.FNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FATHER() As String
            Get
                Return CType(Me(Me.tableIDCARD.FATHERColumn),String)
            End Get
            Set
                Me(Me.tableIDCARD.FATHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FMOTHER() As String
            Get
                Return CType(Me(Me.tableIDCARD.FMOTHERColumn),String)
            End Get
            Set
                Me(Me.tableIDCARD.FMOTHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DBIRTH() As Date
            Get
                Return CType(Me(Me.tableIDCARD.DBIRTHColumn),Date)
            End Get
            Set
                Me(Me.tableIDCARD.DBIRTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableIDCARD.FullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullName' in table 'IDCARD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIDCARD.FullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GRADE() As Short
            Get
                Return CType(Me(Me.tableIDCARD.GRADEColumn),Short)
            End Get
            Set
                Me(Me.tableIDCARD.GRADEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOURCE() As String
            Get
                Return CType(Me(Me.tableIDCARD.SOURCEColumn),String)
            End Get
            Set
                Me(Me.tableIDCARD.SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableIDCARD.FullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFullNameNull()
            Me(Me.tableIDCARD.FullNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class N0OFFICE1Row
        Inherits Global.System.Data.DataRow
        
        Private tableN0OFFICE1 As N0OFFICE1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableN0OFFICE1 = CType(Me.Table,N0OFFICE1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CODE() As Integer
            Get
                Return CType(Me(Me.tableN0OFFICE1.CODEColumn),Integer)
            End Get
            Set
                Me(Me.tableN0OFFICE1.CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL() As String
            Get
                Return CType(Me(Me.tableN0OFFICE1.LABELColumn),String)
            End Get
            Set
                Me(Me.tableN0OFFICE1.LABELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLABEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableN0OFFICE1.SLABELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SLABEL' in table 'N0OFFICE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableN0OFFICE1.SLABELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableN0OFFICE1.RSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RS' in table 'N0OFFICE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableN0OFFICE1.RSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ADRS() As String
            Get
                Try 
                    Return CType(Me(Me.tableN0OFFICE1.ADRSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADRS' in table 'N0OFFICE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableN0OFFICE1.ADRSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableN0OFFICE1.PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONE' in table 'N0OFFICE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableN0OFFICE1.PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableN0OFFICE1.FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAX' in table 'N0OFFICE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableN0OFFICE1.FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSLABELNull() As Boolean
            Return Me.IsNull(Me.tableN0OFFICE1.SLABELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSLABELNull()
            Me(Me.tableN0OFFICE1.SLABELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRSNull() As Boolean
            Return Me.IsNull(Me.tableN0OFFICE1.RSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRSNull()
            Me(Me.tableN0OFFICE1.RSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsADRSNull() As Boolean
            Return Me.IsNull(Me.tableN0OFFICE1.ADRSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetADRSNull()
            Me(Me.tableN0OFFICE1.ADRSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableN0OFFICE1.PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPHONENull()
            Me(Me.tableN0OFFICE1.PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFAXNull() As Boolean
            Return Me.IsNull(Me.tableN0OFFICE1.FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFAXNull()
            Me(Me.tableN0OFFICE1.FAXColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PERGUNTableAdapterRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERGUNTableAdapter As PERGUNTableAdapterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERGUNTableAdapter = CType(Me.Table,PERGUNTableAdapterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CODE() As Decimal
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.CODEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GNAME() As String
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.GNAMEColumn),String)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.GTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GTYPE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GNUMBER() As String
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.GNUMBERColumn),String)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GSTORE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.GSTOREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTORE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GSTOREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GSIZE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.GSIZEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSIZE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GSIZEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GCLEANER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.GCLEANERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GCLEANER' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GCLEANERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GAMMO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.GAMMOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GAMMO' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GAMMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUPPLIER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.SUPPLIERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.SUPPLIERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OWNER() As Decimal
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.OWNERColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.OWNERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OWNERSOURCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.OWNERSOURCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OWNERSOURCE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.OWNERSOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GRADE() As Decimal
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.GRADEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.GRADEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DDATE() As Date
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.DDATEColumn),Date)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.DDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NBDOC() As String
            Get
                Return CType(Me(Me.tablePERGUNTableAdapter.NBDOCColumn),String)
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.NBDOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.SDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDATE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.SDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.UDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UDATE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.UDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UUSER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.UUSERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UUSER' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.UUSERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.MDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MDATE' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.MDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MUSER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERGUNTableAdapter.MUSERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MUSER' in table 'PERGUNTableAdapter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERGUNTableAdapter.MUSERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.GTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGTYPENull()
            Me(Me.tablePERGUNTableAdapter.GTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGSTORENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.GSTOREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGSTORENull()
            Me(Me.tablePERGUNTableAdapter.GSTOREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGSIZENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.GSIZEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGSIZENull()
            Me(Me.tablePERGUNTableAdapter.GSIZEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGCLEANERNull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.GCLEANERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGCLEANERNull()
            Me(Me.tablePERGUNTableAdapter.GCLEANERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGAMMONull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.GAMMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGAMMONull()
            Me(Me.tablePERGUNTableAdapter.GAMMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUPPLIERNull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.SUPPLIERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUPPLIERNull()
            Me(Me.tablePERGUNTableAdapter.SUPPLIERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOWNERSOURCENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.OWNERSOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOWNERSOURCENull()
            Me(Me.tablePERGUNTableAdapter.OWNERSOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOTENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOTENull()
            Me(Me.tablePERGUNTableAdapter.NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSDATENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.SDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSDATENull()
            Me(Me.tablePERGUNTableAdapter.SDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUDATENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.UDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUDATENull()
            Me(Me.tablePERGUNTableAdapter.UDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUUSERNull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.UUSERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUUSERNull()
            Me(Me.tablePERGUNTableAdapter.UUSERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMDATENull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.MDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMDATENull()
            Me(Me.tablePERGUNTableAdapter.MDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMUSERNull() As Boolean
            Return Me.IsNull(Me.tablePERGUNTableAdapter.MUSERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMUSERNull()
            Me(Me.tablePERGUNTableAdapter.MUSERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class serverdatetimeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As serverdatetimeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As serverdatetimeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As serverdatetimeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class N0ITEMSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As N0ITEMSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As N0ITEMSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As N0ITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class IDCARDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IDCARDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As IDCARDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As IDCARDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class N0OFFICE1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As N0OFFICE1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As N0OFFICE1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As N0OFFICE1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PERGUNTableAdapterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERGUNTableAdapterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PERGUNTableAdapterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PERGUNTableAdapterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace gdssDataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class serverdatetimeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "serverdatetime"
            tableMapping.ColumnMappings.Add("SYSDATE", "SYSDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.GDSSTEMPLATE.My.MySettings.Default.gdssConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select sysdate from dual"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As gdssDataSet1.serverdatetimeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As gdssDataSet1.serverdatetimeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As gdssDataSet1.serverdatetimeDataTable = New gdssDataSet1.serverdatetimeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class N0ITEMSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "N0ITEMS"
            tableMapping.ColumnMappings.Add("ITEM", "ITEM")
            tableMapping.ColumnMappings.Add("LABEL", "LABEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TEAM"".""N0ITEMS"" WHERE ((""ITEM"" = :Original_ITEM) AND (""LABEL"" = :Ori"& _ 
                "ginal_LABEL))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ITEM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ITEM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LABEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "LABEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TEAM"".""N0ITEMS"" (""ITEM"", ""LABEL"") VALUES (:ITEM, :LABEL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ITEM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ITEM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LABEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "LABEL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TEAM"".""N0ITEMS"" SET ""ITEM"" = :ITEM, ""LABEL"" = :LABEL WHERE ((""ITEM"" = :Or"& _ 
                "iginal_ITEM) AND (""LABEL"" = :Original_LABEL))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "ITEM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ITEM"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "LABEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "LABEL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_ITEM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "ITEM"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_LABEL"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "LABEL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.GDSSTEMPLATE.My.MySettings.Default.gdssConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(1) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ITEM, LABEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TEAM.N0ITEMS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ITEM LIKE "& _ 
                "'%ع%')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        ITEM, LABEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TEAM.N0ITEMS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (ITEM LIKE "& _ 
                "'%ع%') AND (LABEL LIKE :PARAM1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":PARAM1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 60
            param.IsNullable = true
            param.SourceColumn = "LABEL"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As gdssDataSet1.N0ITEMSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As gdssDataSet1.N0ITEMSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As gdssDataSet1.N0ITEMSDataTable = New gdssDataSet1.N0ITEMSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As gdssDataSet1.N0ITEMSDataTable, ByVal PARAM1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARAM1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal PARAM1 As String) As gdssDataSet1.N0ITEMSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARAM1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            Dim dataTable As gdssDataSet1.N0ITEMSDataTable = New gdssDataSet1.N0ITEMSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As gdssDataSet1.N0ITEMSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As gdssDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "N0ITEMS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ITEM As String, ByVal Original_LABEL As String) As Integer
            If (Original_ITEM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ITEM")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ITEM,String)
            End If
            If (Original_LABEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LABEL")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LABEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ITEM As String, ByVal LABEL As String) As Integer
            If (ITEM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ITEM")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ITEM,String)
            End If
            If (LABEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LABEL")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LABEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ITEM As String, ByVal LABEL As String, ByVal Original_ITEM As String, ByVal Original_LABEL As String) As Integer
            If (ITEM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ITEM")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ITEM,String)
            End If
            If (LABEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LABEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LABEL,String)
            End If
            If (Original_ITEM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ITEM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ITEM,String)
            End If
            If (Original_LABEL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LABEL")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_LABEL,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LABEL As String, ByVal Original_ITEM As String, ByVal Original_LABEL As String) As Integer
            Return Me.Update(Original_ITEM, LABEL, Original_ITEM, Original_LABEL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IDCARDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IDCARD"
            tableMapping.ColumnMappings.Add("CODE", "CODE")
            tableMapping.ColumnMappings.Add("LNAME", "LNAME")
            tableMapping.ColumnMappings.Add("FNAME", "FNAME")
            tableMapping.ColumnMappings.Add("FATHER", "FATHER")
            tableMapping.ColumnMappings.Add("FMOTHER", "FMOTHER")
            tableMapping.ColumnMappings.Add("DBIRTH", "DBIRTH")
            tableMapping.ColumnMappings.Add("GRADE", "GRADE")
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.GDSSTEMPLATE.My.MySettings.Default.gdssConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(9) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODE = :CODE) OR (FNAME like :FNAME) OR (LNA"& _ 
                "ME LIKE :LNAME) OR (FATHER like :FATHER)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FNAME"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":LNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 35
            param.IsNullable = true
            param.SourceColumn = "LNAME"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FATHER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FATHER"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODE = :CODE)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FATHER LIKE :FATHER)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FATHER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FATHER"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FATHER LIKE :FATHER) AND (LNAME LIKE :LNAME)"& _ 
                ""
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FATHER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FATHER"
            Me._commandCollection(4).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":LNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 35
            param.IsNullable = true
            param.SourceColumn = "LNAME"
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FNAME LIKE :FNAME)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FNAME"
            Me._commandCollection(5).Parameters.Add(param)
            Me._commandCollection(6) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FNAME LIKE :FNAME) AND (FATHER LIKE :FATHER)"& _ 
                ""
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FNAME"
            Me._commandCollection(6).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FATHER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FATHER"
            Me._commandCollection(6).Parameters.Add(param)
            Me._commandCollection(7) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FNAME LIKE :FNAME) AND (LNAME LIKE :LNAME)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FNAME"
            Me._commandCollection(7).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":LNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 35
            param.IsNullable = true
            param.SourceColumn = "LNAME"
            Me._commandCollection(7).Parameters.Add(param)
            Me._commandCollection(8) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (FNAME LIKE :FNAME) AND (LNAME LIKE :LNAME) A"& _ 
                "ND (FATHER LIKE :FATHER)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FNAME"
            Me._commandCollection(8).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":LNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 35
            param.IsNullable = true
            param.SourceColumn = "LNAME"
            Me._commandCollection(8).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":FATHER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "FATHER"
            Me._commandCollection(8).Parameters.Add(param)
            Me._commandCollection(9) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT        CODE, LNAME, FNAME, FATHER, FMOTHER, DBIRTH, GRADE, SOURCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         TEAM.IDCARD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (LNAME LIKE :LNAME)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":LNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 35
            param.IsNullable = true
            param.SourceColumn = "LNAME"
            Me._commandCollection(9).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As gdssDataSet1.IDCARDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal CODE As Decimal, ByVal FNAME As String, ByVal LNAME As String, ByVal FATHER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE,Decimal)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FNAME,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LNAME,String)
            End If
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FATHER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CODE As Decimal, ByVal FNAME As String, ByVal LNAME As String, ByVal FATHER As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE,Decimal)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FNAME,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(LNAME,String)
            End If
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FATHER,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCODE(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal CODE As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCODE(ByVal CODE As Decimal) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CODE,Decimal)
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFather(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal FATHER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FATHER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFather(ByVal FATHER As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FATHER,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFatherAndLname(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal FATHER As String, ByVal LNAME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FATHER,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LNAME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFatherAndLname(ByVal FATHER As String, ByVal LNAME As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FATHER,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LNAME,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFName(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal FNAME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFName(ByVal FNAME As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFnameAndFather(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal FNAME As String, ByVal FATHER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FATHER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFnameAndFather(ByVal FNAME As String, ByVal FATHER As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FATHER,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFnameAndLName(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal FNAME As String, ByVal LNAME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LNAME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFnameAndLName(ByVal FNAME As String, ByVal LNAME As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LNAME,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByFullName(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal FNAME As String, ByVal LNAME As String, ByVal FATHER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LNAME,String)
            End If
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FATHER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFullName(ByVal FNAME As String, ByVal LNAME As String, ByVal FATHER As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (FNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FNAME,String)
            End If
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LNAME,String)
            End If
            If (FATHER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FATHER")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FATHER,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLname(ByVal dataTable As gdssDataSet1.IDCARDDataTable, ByVal LNAME As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LNAME,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLname(ByVal LNAME As String) As gdssDataSet1.IDCARDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (LNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LNAME")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LNAME,String)
            End If
            Dim dataTable As gdssDataSet1.IDCARDDataTable = New gdssDataSet1.IDCARDDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class N0OFFICE1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "N0OFFICE1"
            tableMapping.ColumnMappings.Add("CODE", "CODE")
            tableMapping.ColumnMappings.Add("LABEL", "LABEL")
            tableMapping.ColumnMappings.Add("SLABEL", "SLABEL")
            tableMapping.ColumnMappings.Add("RS", "RS")
            tableMapping.ColumnMappings.Add("ADRS", "ADRS")
            tableMapping.ColumnMappings.Add("PHONE", "PHONE")
            tableMapping.ColumnMappings.Add("FAX", "FAX")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.GDSSTEMPLATE.My.MySettings.Default.gdssConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(1) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CODE, LABEL, SLABEL, RS, ADRS, PHONE, FAX"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TEAM.N0O"& _ 
                "FFICE1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODE >= 50000)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CODE, LABEL, SLABEL, RS, ADRS, PHONE, FAX"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TEAM.N0O"& _ 
                "FFICE1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODE >= 50000) AND (LABEL LIKE :PARAM1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":PARAM1"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "LABEL"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As gdssDataSet1.N0OFFICE1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As gdssDataSet1.N0OFFICE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As gdssDataSet1.N0OFFICE1DataTable = New gdssDataSet1.N0OFFICE1DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByName(ByVal dataTable As gdssDataSet1.N0OFFICE1DataTable, ByVal PARAM1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARAM1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal PARAM1 As String) As gdssDataSet1.N0OFFICE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARAM1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            Dim dataTable As gdssDataSet1.N0OFFICE1DataTable = New gdssDataSet1.N0OFFICE1DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PERGUNTableAdapterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
        
        Private _connection As Global.Oracle.ManagedDataAccess.Client.OracleConnection
        
        Private _transaction As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
        
        Private _commandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Oracle.ManagedDataAccess.Client.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Oracle.ManagedDataAccess.Client.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.Oracle.ManagedDataAccess.Client.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Oracle.ManagedDataAccess.Client.OracleDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PERGUNTableAdapter"
            tableMapping.ColumnMappings.Add("CODE", "CODE")
            tableMapping.ColumnMappings.Add("GNAME", "GNAME")
            tableMapping.ColumnMappings.Add("GTYPE", "GTYPE")
            tableMapping.ColumnMappings.Add("GNUMBER", "GNUMBER")
            tableMapping.ColumnMappings.Add("GSTORE", "GSTORE")
            tableMapping.ColumnMappings.Add("GSIZE", "GSIZE")
            tableMapping.ColumnMappings.Add("GCLEANER", "GCLEANER")
            tableMapping.ColumnMappings.Add("GAMMO", "GAMMO")
            tableMapping.ColumnMappings.Add("SUPPLIER", "SUPPLIER")
            tableMapping.ColumnMappings.Add("OWNER", "OWNER")
            tableMapping.ColumnMappings.Add("OWNERSOURCE", "OWNERSOURCE")
            tableMapping.ColumnMappings.Add("GRADE", "GRADE")
            tableMapping.ColumnMappings.Add("DDATE", "DDATE")
            tableMapping.ColumnMappings.Add("NBDOC", "NBDOC")
            tableMapping.ColumnMappings.Add("NOTE", "NOTE")
            tableMapping.ColumnMappings.Add("SDATE", "SDATE")
            tableMapping.ColumnMappings.Add("UDATE", "UDATE")
            tableMapping.ColumnMappings.Add("UUSER", "UUSER")
            tableMapping.ColumnMappings.Add("MDATE", "MDATE")
            tableMapping.ColumnMappings.Add("MUSER", "MUSER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TEAM"".""PERGUN"" WHERE ((""CODE"" = :Original_CODE) AND (""GNAME"" = :Orig"& _ 
                "inal_GNAME) AND ((:IsNull_GTYPE = 1 AND ""GTYPE"" IS NULL) OR (""GTYPE"" = :Original"& _ 
                "_GTYPE)) AND (""GNUMBER"" = :Original_GNUMBER) AND ((:IsNull_GSTORE = 1 AND ""GSTOR"& _ 
                "E"" IS NULL) OR (""GSTORE"" = :Original_GSTORE)) AND ((:IsNull_GSIZE = 1 AND ""GSIZE"& _ 
                """ IS NULL) OR (""GSIZE"" = :Original_GSIZE)) AND ((:IsNull_GCLEANER = 1 AND ""GCLEA"& _ 
                "NER"" IS NULL) OR (""GCLEANER"" = :Original_GCLEANER)) AND ((:IsNull_GAMMO = 1 AND "& _ 
                """GAMMO"" IS NULL) OR (""GAMMO"" = :Original_GAMMO)) AND ((:IsNull_SUPPLIER = 1 AND "& _ 
                """SUPPLIER"" IS NULL) OR (""SUPPLIER"" = :Original_SUPPLIER)) AND (""OWNER"" = :Origin"& _ 
                "al_OWNER) AND ((:IsNull_OWNERSOURCE = 1 AND ""OWNERSOURCE"" IS NULL) OR (""OWNERSOU"& _ 
                "RCE"" = :Original_OWNERSOURCE)) AND (""GRADE"" = :Original_GRADE) AND (""DDATE"" = :O"& _ 
                "riginal_DDATE) AND (""NBDOC"" = :Original_NBDOC) AND ((:IsNull_NOTE = 1 AND ""NOTE"""& _ 
                " IS NULL) OR (""NOTE"" = :Original_NOTE)) AND ((:IsNull_SDATE = 1 AND ""SDATE"" IS N"& _ 
                "ULL) OR (""SDATE"" = :Original_SDATE)) AND ((:IsNull_UDATE = 1 AND ""UDATE"" IS NULL"& _ 
                ") OR (""UDATE"" = :Original_UDATE)) AND ((:IsNull_UUSER = 1 AND ""UUSER"" IS NULL) O"& _ 
                "R (""UUSER"" = :Original_UUSER)) AND ((:IsNull_MDATE = 1 AND ""MDATE"" IS NULL) OR ("& _ 
                """MDATE"" = :Original_MDATE)) AND ((:IsNull_MUSER = 1 AND ""MUSER"" IS NULL) OR (""MU"& _ 
                "SER"" = :Original_MUSER)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "GNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GTYPE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GNUMBER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "GNUMBER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GSTORE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GSTORE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GSIZE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GSIZE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GCLEANER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GCLEANER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GAMMO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GAMMO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SUPPLIER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_OWNER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GRADE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GRADE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NBDOC"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NBDOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NOTE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOTE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_UDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_UDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_UUSER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_UUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MUSER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TEAM"".""PERGUN"" (""CODE"", ""GNAME"", ""GTYPE"", ""GNUMBER"", ""GSTORE"", ""GSIZ"& _ 
                "E"", ""GCLEANER"", ""GAMMO"", ""SUPPLIER"", ""OWNER"", ""OWNERSOURCE"", ""GRADE"", ""DDATE"", """& _ 
                "NBDOC"", ""NOTE"", ""SDATE"", ""UDATE"", ""UUSER"", ""MDATE"", ""MUSER"") VALUES (:CODE, :GNA"& _ 
                "ME, :GTYPE, :GNUMBER, :GSTORE, :GSIZE, :GCLEANER, :GAMMO, :SUPPLIER, :OWNER, :OW"& _ 
                "NERSOURCE, :GRADE, :DDATE, :NBDOC, :NOTE, :SDATE, :UDATE, :UUSER, :MDATE, :MUSER"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "GNAME"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GNUMBER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "GNUMBER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GSTORE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GSIZE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GCLEANER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GAMMO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "OWNER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GRADE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GRADE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NBDOC"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NBDOC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOTE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "UDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "UUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MDATE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MUSER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TEAM"".""PERGUN"" SET ""CODE"" = :CODE, ""GNAME"" = :GNAME, ""GTYPE"" = :GTYPE, ""G"& _ 
                "NUMBER"" = :GNUMBER, ""GSTORE"" = :GSTORE, ""GSIZE"" = :GSIZE, ""GCLEANER"" = :GCLEANER"& _ 
                ", ""GAMMO"" = :GAMMO, ""SUPPLIER"" = :SUPPLIER, ""OWNER"" = :OWNER, ""OWNERSOURCE"" = :O"& _ 
                "WNERSOURCE, ""GRADE"" = :GRADE, ""DDATE"" = :DDATE, ""NBDOC"" = :NBDOC, ""NOTE"" = :NOTE"& _ 
                ", ""SDATE"" = :SDATE, ""UDATE"" = :UDATE, ""UUSER"" = :UUSER, ""MDATE"" = :MDATE, ""MUSER"& _ 
                """ = :MUSER WHERE ((""CODE"" = :Original_CODE) AND (""GNAME"" = :Original_GNAME) AND "& _ 
                "((:IsNull_GTYPE = 1 AND ""GTYPE"" IS NULL) OR (""GTYPE"" = :Original_GTYPE)) AND (""G"& _ 
                "NUMBER"" = :Original_GNUMBER) AND ((:IsNull_GSTORE = 1 AND ""GSTORE"" IS NULL) OR ("& _ 
                """GSTORE"" = :Original_GSTORE)) AND ((:IsNull_GSIZE = 1 AND ""GSIZE"" IS NULL) OR ("""& _ 
                "GSIZE"" = :Original_GSIZE)) AND ((:IsNull_GCLEANER = 1 AND ""GCLEANER"" IS NULL) OR"& _ 
                " (""GCLEANER"" = :Original_GCLEANER)) AND ((:IsNull_GAMMO = 1 AND ""GAMMO"" IS NULL)"& _ 
                " OR (""GAMMO"" = :Original_GAMMO)) AND ((:IsNull_SUPPLIER = 1 AND ""SUPPLIER"" IS NU"& _ 
                "LL) OR (""SUPPLIER"" = :Original_SUPPLIER)) AND (""OWNER"" = :Original_OWNER) AND (("& _ 
                ":IsNull_OWNERSOURCE = 1 AND ""OWNERSOURCE"" IS NULL) OR (""OWNERSOURCE"" = :Original"& _ 
                "_OWNERSOURCE)) AND (""GRADE"" = :Original_GRADE) AND (""DDATE"" = :Original_DDATE) A"& _ 
                "ND (""NBDOC"" = :Original_NBDOC) AND ((:IsNull_NOTE = 1 AND ""NOTE"" IS NULL) OR (""N"& _ 
                "OTE"" = :Original_NOTE)) AND ((:IsNull_SDATE = 1 AND ""SDATE"" IS NULL) OR (""SDATE"""& _ 
                " = :Original_SDATE)) AND ((:IsNull_UDATE = 1 AND ""UDATE"" IS NULL) OR (""UDATE"" = "& _ 
                ":Original_UDATE)) AND ((:IsNull_UUSER = 1 AND ""UUSER"" IS NULL) OR (""UUSER"" = :Or"& _ 
                "iginal_UUSER)) AND ((:IsNull_MDATE = 1 AND ""MDATE"" IS NULL) OR (""MDATE"" = :Origi"& _ 
                "nal_MDATE)) AND ((:IsNull_MUSER = 1 AND ""MUSER"" IS NULL) OR (""MUSER"" = :Original"& _ 
                "_MUSER)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "GNAME"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GNUMBER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "GNUMBER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GSTORE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GSIZE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GCLEANER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GAMMO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SUPPLIER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "OWNER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "GRADE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GRADE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "DDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NBDOC"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NBDOC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "NOTE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "SDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "UDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "UUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MDATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "MUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MUSER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "GNAME"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GTYPE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GNUMBER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "GNUMBER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GSTORE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GSTORE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GSIZE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GSIZE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GCLEANER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GCLEANER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_GAMMO"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GAMMO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SUPPLIER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SUPPLIER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_OWNER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_GRADE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GRADE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_DDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NBDOC"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NBDOC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_NOTE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_NOTE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_SDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_SDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_UDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_UDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_UUSER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_UUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MDATE"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "MDATE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "IsNull_MUSER"
            param.DbType = Global.System.Data.DbType.Int32
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = "Original_MUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "MUSER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Oracle.ManagedDataAccess.Client.OracleConnection()
            Me._connection.ConnectionString = Global.GDSSTEMPLATE.My.MySettings.Default.gdssConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Oracle.ManagedDataAccess.Client.OracleCommand(3) {}
            Me._commandCollection(0) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CODE, GNAME, GTYPE, GNUMBER, GSTORE, GSIZE, GCLEANER, GAMMO, SUPPLI"& _ 
                "ER, OWNER, OWNERSOURCE, GRADE, DDATE, NBDOC, NOTE, SDATE, UDATE, UUSER, MDATE, M"& _ 
                "USER"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TEAM.PERGUN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        GNAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            TEAM.PERGUN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (GNUMBER = :GNBPAR"& _ 
                "AM)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Oracle.ManagedDataAccess.Client.OracleParameter = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GNBPARAM"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "GNUMBER"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT MAX(CODE)+1  as NewCode FROM   TEAM.PERGUN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.Oracle.ManagedDataAccess.Client.OracleCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO TEAM.PERGUN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (CODE, GNAME, GTYPE, GNUMBER, G"& _ 
                "STORE, GSIZE, GCLEANER, GAMMO, SUPPLIER, OWNER, OWNERSOURCE, GRADE, DDATE, NBDOC"& _ 
                ", NOTE, SDATE, UDATE, UUSER)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (:CODE, :GNAME, :GTYPE, :GNUMBER, :G"& _ 
                "STORE, :GSIZE, :GCLEANER, :GAMMO, :SUPPLIER, :OWNER, :OWNERSOURCE, :GRADE, :DDAT"& _ 
                "E, :NBDOC, :NOTE, :SDATE, :UDATE, :UUSER)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":CODE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "CODE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GNAME"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "GNAME"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GTYPE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "GTYPE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GNUMBER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "GNUMBER"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GSTORE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GSTORE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GSIZE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "GSIZE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GCLEANER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GCLEANER"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GAMMO"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GAMMO"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":SUPPLIER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "SUPPLIER"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":OWNER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNER"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":OWNERSOURCE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "OWNERSOURCE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":GRADE"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Decimal]
            param.Size = 22
            param.IsNullable = true
            param.SourceColumn = "GRADE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":DDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "DDATE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":NBDOC"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 20
            param.IsNullable = true
            param.SourceColumn = "NBDOC"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":NOTE"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 500
            param.IsNullable = true
            param.SourceColumn = "NOTE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":SDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "SDATE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":UDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.[Date]
            param.Size = 7
            param.IsNullable = true
            param.SourceColumn = "UDATE"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.Oracle.ManagedDataAccess.Client.OracleParameter()
            param.ParameterName = ":UUSER"
            param.OracleDbTypeEx = Global.Oracle.ManagedDataAccess.Client.OracleDbType.Varchar2
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "UUSER"
            Me._commandCollection(3).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As gdssDataSet1.PERGUNTableAdapterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As gdssDataSet1.PERGUNTableAdapterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As gdssDataSet1.PERGUNTableAdapterDataTable = New gdssDataSet1.PERGUNTableAdapterDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As gdssDataSet1.PERGUNTableAdapterDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As gdssDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "PERGUNTableAdapter")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_CODE As Decimal,  _
                    ByVal Original_GNAME As String,  _
                    ByVal Original_GTYPE As String,  _
                    ByVal Original_GNUMBER As String,  _
                    ByVal Original_GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GSIZE As String,  _
                    ByVal Original_GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_OWNER As Decimal,  _
                    ByVal Original_OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GRADE As Decimal,  _
                    ByVal Original_DDATE As Date,  _
                    ByVal Original_NBDOC As String,  _
                    ByVal Original_NOTE As String,  _
                    ByVal Original_SDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_UDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_UUSER As String,  _
                    ByVal Original_MDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MUSER As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODE,Decimal)
            If (Original_GNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GNAME,String)
            End If
            If (Original_GTYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_GTYPE,String)
            End If
            If (Original_GNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GNUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_GNUMBER,String)
            End If
            If (Original_GSTORE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_GSTORE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_GSIZE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_GSIZE,String)
            End If
            If (Original_GCLEANER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_GCLEANER.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_GAMMO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_GAMMO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_SUPPLIER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SUPPLIER.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_OWNER,Decimal)
            If (Original_OWNERSOURCE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_OWNERSOURCE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_GRADE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_DDATE,Date)
            If (Original_NBDOC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NBDOC")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_NBDOC,String)
            End If
            If (Original_NOTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_NOTE,String)
            End If
            If (Original_SDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_UDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_UDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_UUSER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_UUSER,String)
            End If
            If (Original_MDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_MDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_MUSER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_MUSER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CODE As Decimal,  _
                    ByVal GNAME As String,  _
                    ByVal GTYPE As String,  _
                    ByVal GNUMBER As String,  _
                    ByVal GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal GSIZE As String,  _
                    ByVal GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal OWNER As Decimal,  _
                    ByVal OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal GRADE As Decimal,  _
                    ByVal DDATE As Date,  _
                    ByVal NBDOC As String,  _
                    ByVal NOTE As String,  _
                    ByVal SDATE As Global.System.Nullable(Of Date),  _
                    ByVal UDATE As Global.System.Nullable(Of Date),  _
                    ByVal UUSER As String,  _
                    ByVal MDATE As Global.System.Nullable(Of Date),  _
                    ByVal MUSER As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODE,Decimal)
            If (GNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GNAME,String)
            End If
            If (GTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(GTYPE,String)
            End If
            If (GNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(GNUMBER,String)
            End If
            If (GSTORE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GSTORE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSIZE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GSIZE,String)
            End If
            If (GCLEANER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(GCLEANER.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GAMMO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(GAMMO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SUPPLIER.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(OWNER,Decimal)
            If (OWNERSOURCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OWNERSOURCE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(GRADE,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(DDATE,Date)
            If (NBDOC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NBDOC")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NBDOC,String)
            End If
            If (NOTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NOTE,String)
            End If
            If (SDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(SDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (UDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(UDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (UUSER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(UUSER,String)
            End If
            If (MDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MUSER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MUSER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODE As Decimal,  _
                    ByVal GNAME As String,  _
                    ByVal GTYPE As String,  _
                    ByVal GNUMBER As String,  _
                    ByVal GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal GSIZE As String,  _
                    ByVal GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal OWNER As Decimal,  _
                    ByVal OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal GRADE As Decimal,  _
                    ByVal DDATE As Date,  _
                    ByVal NBDOC As String,  _
                    ByVal NOTE As String,  _
                    ByVal SDATE As Global.System.Nullable(Of Date),  _
                    ByVal UDATE As Global.System.Nullable(Of Date),  _
                    ByVal UUSER As String,  _
                    ByVal MDATE As Global.System.Nullable(Of Date),  _
                    ByVal MUSER As String,  _
                    ByVal Original_CODE As Decimal,  _
                    ByVal Original_GNAME As String,  _
                    ByVal Original_GTYPE As String,  _
                    ByVal Original_GNUMBER As String,  _
                    ByVal Original_GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GSIZE As String,  _
                    ByVal Original_GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_OWNER As Decimal,  _
                    ByVal Original_OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GRADE As Decimal,  _
                    ByVal Original_DDATE As Date,  _
                    ByVal Original_NBDOC As String,  _
                    ByVal Original_NOTE As String,  _
                    ByVal Original_SDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_UDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_UUSER As String,  _
                    ByVal Original_MDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MUSER As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODE,Decimal)
            If (GNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GNAME,String)
            End If
            If (GTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GTYPE,String)
            End If
            If (GNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(GNUMBER,String)
            End If
            If (GSTORE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(GSTORE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSIZE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(GSIZE,String)
            End If
            If (GCLEANER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(GCLEANER.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GAMMO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(GAMMO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SUPPLIER.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(OWNER,Decimal)
            If (OWNERSOURCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(OWNERSOURCE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(GRADE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DDATE,Date)
            If (NBDOC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NBDOC")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NBDOC,String)
            End If
            If (NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NOTE,String)
            End If
            If (SDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (UDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(UDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (UUSER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(UUSER,String)
            End If
            If (MDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MUSER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MUSER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_CODE,Decimal)
            If (Original_GNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_GNAME,String)
            End If
            If (Original_GTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_GTYPE,String)
            End If
            If (Original_GNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_GNUMBER,String)
            End If
            If (Original_GSTORE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_GSTORE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_GSIZE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_GSIZE,String)
            End If
            If (Original_GCLEANER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_GCLEANER.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_GAMMO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_GAMMO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_SUPPLIER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SUPPLIER.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_OWNER,Decimal)
            If (Original_OWNERSOURCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_OWNERSOURCE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_GRADE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_DDATE,Date)
            If (Original_NBDOC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NBDOC")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_NBDOC,String)
            End If
            If (Original_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_NOTE,String)
            End If
            If (Original_SDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_SDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_UDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_UDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_UUSER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_UUSER,String)
            End If
            If (Original_MDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_MDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_MUSER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_MUSER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal GNAME As String,  _
                    ByVal GTYPE As String,  _
                    ByVal GNUMBER As String,  _
                    ByVal GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal GSIZE As String,  _
                    ByVal GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal OWNER As Decimal,  _
                    ByVal OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal GRADE As Decimal,  _
                    ByVal DDATE As Date,  _
                    ByVal NBDOC As String,  _
                    ByVal NOTE As String,  _
                    ByVal SDATE As Global.System.Nullable(Of Date),  _
                    ByVal UDATE As Global.System.Nullable(Of Date),  _
                    ByVal UUSER As String,  _
                    ByVal MDATE As Global.System.Nullable(Of Date),  _
                    ByVal MUSER As String,  _
                    ByVal Original_CODE As Decimal,  _
                    ByVal Original_GNAME As String,  _
                    ByVal Original_GTYPE As String,  _
                    ByVal Original_GNUMBER As String,  _
                    ByVal Original_GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GSIZE As String,  _
                    ByVal Original_GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_OWNER As Decimal,  _
                    ByVal Original_OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_GRADE As Decimal,  _
                    ByVal Original_DDATE As Date,  _
                    ByVal Original_NBDOC As String,  _
                    ByVal Original_NOTE As String,  _
                    ByVal Original_SDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_UDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_UUSER As String,  _
                    ByVal Original_MDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MUSER As String) As Integer
            Return Me.Update(Original_CODE, GNAME, GTYPE, GNUMBER, GSTORE, GSIZE, GCLEANER, GAMMO, SUPPLIER, OWNER, OWNERSOURCE, GRADE, DDATE, NBDOC, NOTE, SDATE, UDATE, UUSER, MDATE, MUSER, Original_CODE, Original_GNAME, Original_GTYPE, Original_GNUMBER, Original_GSTORE, Original_GSIZE, Original_GCLEANER, Original_GAMMO, Original_SUPPLIER, Original_OWNER, Original_OWNERSOURCE, Original_GRADE, Original_DDATE, Original_NBDOC, Original_NOTE, Original_SDATE, Original_UDATE, Original_UUSER, Original_MDATE, Original_MUSER)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function checkIfNbExist(ByVal GNBPARAM As String) As String
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(1)
            If (GNBPARAM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNBPARAM")
            Else
                command.Parameters(0).Value = CType(GNBPARAM,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function getMaxCodePlus1() As Object
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(2)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal CODE As Decimal,  _
                    ByVal GNAME As String,  _
                    ByVal GTYPE As String,  _
                    ByVal GNUMBER As String,  _
                    ByVal GSTORE As Global.System.Nullable(Of Decimal),  _
                    ByVal GSIZE As String,  _
                    ByVal GCLEANER As Global.System.Nullable(Of Decimal),  _
                    ByVal GAMMO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER As Global.System.Nullable(Of Decimal),  _
                    ByVal OWNER As Decimal,  _
                    ByVal OWNERSOURCE As Global.System.Nullable(Of Decimal),  _
                    ByVal GRADE As Decimal,  _
                    ByVal DDATE As Date,  _
                    ByVal NBDOC As String,  _
                    ByVal NOTE As String,  _
                    ByVal SDATE As Global.System.Nullable(Of Date),  _
                    ByVal UDATE As Global.System.Nullable(Of Date),  _
                    ByVal UUSER As String) As Integer
            Dim command As Global.Oracle.ManagedDataAccess.Client.OracleCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(CODE,Decimal)
            If (GNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNAME")
            Else
                command.Parameters(1).Value = CType(GNAME,String)
            End If
            If (GTYPE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(GTYPE,String)
            End If
            If (GNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GNUMBER")
            Else
                command.Parameters(3).Value = CType(GNUMBER,String)
            End If
            If (GSTORE.HasValue = true) Then
                command.Parameters(4).Value = CType(GSTORE.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (GSIZE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(GSIZE,String)
            End If
            If (GCLEANER.HasValue = true) Then
                command.Parameters(6).Value = CType(GCLEANER.Value,Decimal)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (GAMMO.HasValue = true) Then
                command.Parameters(7).Value = CType(GAMMO.Value,Decimal)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER.HasValue = true) Then
                command.Parameters(8).Value = CType(SUPPLIER.Value,Decimal)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            command.Parameters(9).Value = CType(OWNER,Decimal)
            If (OWNERSOURCE.HasValue = true) Then
                command.Parameters(10).Value = CType(OWNERSOURCE.Value,Decimal)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            command.Parameters(11).Value = CType(GRADE,Decimal)
            command.Parameters(12).Value = CType(DDATE,Date)
            If (NBDOC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NBDOC")
            Else
                command.Parameters(13).Value = CType(NBDOC,String)
            End If
            If (NOTE Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(NOTE,String)
            End If
            If (SDATE.HasValue = true) Then
                command.Parameters(15).Value = CType(SDATE.Value,Date)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (UDATE.HasValue = true) Then
                command.Parameters(16).Value = CType(UDATE.Value,Date)
            Else
                command.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (UUSER Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(UUSER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _n0ITEMSTableAdapter As N0ITEMSTableAdapter
        
        Private _pERGUNTableAdapterTableAdapter As PERGUNTableAdapterTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property N0ITEMSTableAdapter() As N0ITEMSTableAdapter
            Get
                Return Me._n0ITEMSTableAdapter
            End Get
            Set
                Me._n0ITEMSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PERGUNTableAdapterTableAdapter() As PERGUNTableAdapterTableAdapter
            Get
                Return Me._pERGUNTableAdapterTableAdapter
            End Get
            Set
                Me._pERGUNTableAdapterTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._n0ITEMSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._n0ITEMSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._n0ITEMSTableAdapter.Connection
                End If
                If ((Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pERGUNTableAdapterTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pERGUNTableAdapterTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._n0ITEMSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As gdssDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._n0ITEMSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.N0ITEMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._n0ITEMSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PERGUNTableAdapter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pERGUNTableAdapterTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As gdssDataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._n0ITEMSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.N0ITEMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._n0ITEMSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PERGUNTableAdapter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pERGUNTableAdapterTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As gdssDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PERGUNTableAdapter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pERGUNTableAdapterTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._n0ITEMSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.N0ITEMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._n0ITEMSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As gdssDataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._n0ITEMSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._n0ITEMSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pERGUNTableAdapterTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._n0ITEMSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._n0ITEMSTableAdapter, Me._n0ITEMSTableAdapter.Connection)
                    Me._n0ITEMSTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._n0ITEMSTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._n0ITEMSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._n0ITEMSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._n0ITEMSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pERGUNTableAdapterTableAdapter, Me._pERGUNTableAdapterTableAdapter.Connection)
                    Me._pERGUNTableAdapterTableAdapter.Connection = CType(workConnection,Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pERGUNTableAdapterTableAdapter.Transaction = CType(workTransaction,Global.Oracle.ManagedDataAccess.Client.OracleTransaction)
                    If Me._pERGUNTableAdapterTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pERGUNTableAdapterTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pERGUNTableAdapterTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._n0ITEMSTableAdapter) Is Nothing) Then
                    Me._n0ITEMSTableAdapter.Connection = CType(revertConnections(Me._n0ITEMSTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._n0ITEMSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pERGUNTableAdapterTableAdapter) Is Nothing) Then
                    Me._pERGUNTableAdapterTableAdapter.Connection = CType(revertConnections(Me._pERGUNTableAdapterTableAdapter),Global.Oracle.ManagedDataAccess.Client.OracleConnection)
                    Me._pERGUNTableAdapterTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
